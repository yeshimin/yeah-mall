package com.yeshimin.yeahboot.app.service;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.yeshimin.yeahboot.app.common.enums.OrderSceneEnum;import com.yeshimin.yeahboot.app.common.enums.OrderStatusEnum;import com.yeshimin.yeahboot.app.domain.dto.*;import com.yeshimin.yeahboot.app.domain.vo.OrderShopProductVo;import com.yeshimin.yeahboot.app.domain.vo.OrderShopVo;import com.yeshimin.yeahboot.common.common.config.mybatis.QueryHelper;import com.yeshimin.yeahboot.common.common.exception.BaseException;import com.yeshimin.yeahboot.common.service.IdService;import com.yeshimin.yeahboot.data.domain.entity.*;import com.yeshimin.yeahboot.data.domain.vo.ProductSpecOptVo;import com.yeshimin.yeahboot.data.repository.*;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;@Slf4j@Service@RequiredArgsConstructorpublic class AppOrderService {    private final ProductSkuRepo productSkuRepo;    private final ProductSpuRepo productSpuRepo;    private final OrderItemRepo orderItemRepo;    private final OrderRepo orderRepo;    private final ShopRepo shopRepo;    private final ProductSkuSpecRepo productSkuSpecRepo;    private final ProductSpecDefRepo productSpecDefRepo;    private final ProductSpecOptDefRepo productSpecOptDefRepo;    private final CartItemRepo cartItemRepo;    private final IdService idService;    /**     * 提交订单     */    @Transactional(rollbackFor = Exception.class)    public void submit(Long userId, OrderSubmitDto dto) {        // 查询sku        Set<Long> skuIds = dto.getItems().stream().map(OrderItemDto::getSkuId).collect(Collectors.toSet());        if (skuIds.size() != dto.getItems().size()) {            throw new BaseException("订单项中存在重复的SKU ID");        }        List<ProductSkuEntity> listSku = productSkuRepo.findListByIds(skuIds);        if (listSku.size() != skuIds.size()) {            throw new BaseException("订单项中存在无效的SKU ID");        }        // 检查：是否属于多家店铺        Set<Long> shopIds = listSku.stream().map(ProductSkuEntity::getShopId).collect(Collectors.toSet());        if (shopIds.size() > 1) {            throw new BaseException("订单项中存在多家店铺的SKU");        }        // 检查库存        for (OrderItemDto item : dto.getItems()) {            ProductSkuEntity sku = listSku.stream()                    .filter(s -> s.getId().equals(item.getSkuId()))                    .findFirst()                    .orElseThrow(() -> new BaseException("SKU ID " + item.getSkuId() + " 不存在"));            if (sku.getStock() < item.getQuantity()) {                throw new BaseException("SKU " + sku.getName() + " 库存不足");            }            // 扣减库存            boolean r = productSkuRepo.occurStock(item.getSkuId(), item.getQuantity());            log.info("sku[{},{}] 扣减库存结果：{}", sku.getId(), sku.getName(), r);            if (!r) {                throw new BaseException("SKU " + sku.getName() + " 库存不足");            }        }        // 创建订单        OrderEntity order = new OrderEntity();        List<OrderItemEntity> orderItems = new ArrayList<>(dto.getItems().size());        // 生成订单编号        final String orderNo = idService.nextEncodedId();        // 查询spu        Set<Long> spuIds = listSku.stream().map(ProductSkuEntity::getSpuId).collect(Collectors.toSet());        Map<Long, ProductSpuEntity> mapSpu = productSpuRepo.findListByIds(spuIds)                .stream().collect(Collectors.toMap(ProductSpuEntity::getId, spu -> spu));        // 总金额        BigDecimal totalAmount = BigDecimal.ZERO;        // 生成订单明细        for (OrderItemDto item : dto.getItems()) {            ProductSkuEntity sku = listSku.stream()                    .filter(s -> s.getId().equals(item.getSkuId()))                    .findFirst()                    .orElseThrow(() -> new BaseException("SKU ID " + item.getSkuId() + " 不存在"));            ProductSpuEntity spu = mapSpu.get(sku.getSpuId());            if (spu == null) {                throw new BaseException("SPU ID " + sku.getSpuId() + " 不存在");            }            OrderItemEntity orderItem = new OrderItemEntity();            orderItem.setMchId(sku.getMchId());            orderItem.setShopId(sku.getShopId());            orderItem.setMemberId(userId);            orderItem.setOrderNo(orderNo);            orderItem.setSkuId(sku.getId());            orderItem.setSkuName(sku.getName());            orderItem.setSpuId(sku.getSpuId());            orderItem.setSpuName(spu.getName());            orderItem.setUnitPrice(sku.getPrice());            orderItem.setQuantity(item.getQuantity());            orderItem.setTotalPrice(sku.getPrice().multiply(new BigDecimal(item.getQuantity())));            orderItems.add(orderItem);            // 累加总金额            totalAmount = totalAmount.add(orderItem.getTotalPrice());        }        // 保存订单        Optional.ofNullable(listSku.get(0)).ifPresent(sku -> {            order.setMchId(sku.getMchId());            order.setShopId(sku.getShopId());        });        order.setMemberId(userId);        order.setOrderNo(orderNo);        order.setTotalAmount(totalAmount);        order.setStatus(OrderStatusEnum.WAIT_PAY.getValue()); // 设置订单状态为待付款        order.insert();        // 保存订单明细        orderItems.forEach(orderItem -> orderItem.setOrderId(order.getId()));        orderItemRepo.saveBatch(orderItems);        // 如果是【购物车下单】场景，则清除对应的购物车商品        if (Objects.equals(dto.getScene(), OrderSceneEnum.CART.getValue())) {            if (!skuIds.isEmpty()) {                cartItemRepo.deleteByMemberIdAndSkuIds(userId, skuIds);            }        }    }    /**     * 查询个人订单     */    public Page<OrderEntity> query(Long userId, Page<OrderEntity> page, OrderQueryDto dto) {        LambdaQueryWrapper<OrderEntity> wrapper = QueryHelper.getQueryWrapper(dto, OrderEntity.class);        wrapper.eq(OrderEntity::getMemberId, userId);        wrapper.eq(dto.getStatus() != null, OrderEntity::getStatus, dto.getStatus());        return orderRepo.page(page, wrapper);    }    /**     * 预览订单     */    public List<OrderShopVo> preview(Long userId, OrderPreviewDto dto) {        Set<Long> skuIds = dto.getItems().stream().map(OrderPreviewItemDto::getSkuId).collect(Collectors.toSet());        // to map        Map<Long, Integer> mapSkuQuantity = dto.getItems()                .stream().collect(Collectors.toMap(OrderPreviewItemDto::getSkuId, OrderPreviewItemDto::getQuantity));        // 查询sku        List<ProductSkuEntity> listSku = productSkuRepo.findListByIds(skuIds);        // 检查        if (listSku.size() != skuIds.size()) {            throw new BaseException("订单项中存在无效的SKU ID");        }        // 查询店铺信息        Set<Long> shopIds = listSku.stream().map(ProductSkuEntity::getShopId).collect(Collectors.toSet());        List<ShopEntity> listShop = shopRepo.findListByIds(shopIds);        Map<Long, ShopEntity> mapShop = listShop.stream().collect(Collectors.toMap(ShopEntity::getId, shop -> shop));        // 查询spu信息        Set<Long> spuIds = listSku.stream().map(ProductSkuEntity::getSpuId).collect(Collectors.toSet());        List<ProductSpuEntity> listSpu = productSpuRepo.findListByIds(spuIds);        Map<Long, ProductSpuEntity> mapSpu = listSpu.stream().collect(Collectors.toMap(ProductSpuEntity::getId, spu -> spu));        // 查询sku规格        List<ProductSkuSpecEntity> listSkuSpec = productSkuSpecRepo.findListBySkuIds(skuIds);        Map<Long, List<ProductSkuSpecEntity>> mapSkuSpecs = listSkuSpec.stream().collect(Collectors.groupingBy(ProductSkuSpecEntity::getSkuId));        // 查询specs        Set<Long> specIds = listSkuSpec.stream().map(ProductSkuSpecEntity::getSpecId).collect(Collectors.toSet());        Map<Long, ProductSpecDefEntity> mapSpecDef = productSpecDefRepo.findListByIds(specIds)                .stream().collect(Collectors.toMap(ProductSpecDefEntity::getId, v -> v));        // 查询opts        Set<Long> optIds = listSkuSpec.stream().map(ProductSkuSpecEntity::getOptId).collect(Collectors.toSet());        Map<Long, ProductSpecOptDefEntity> mapOptDef = productSpecOptDefRepo.findListByIds(optIds)                .stream().collect(Collectors.toMap(ProductSpecOptDefEntity::getId, v -> v));        List<OrderShopProductVo> listOrderShopProductVo = listSku.stream().map(sku -> {            OrderShopProductVo vo = new OrderShopProductVo();            vo.setShopId(sku.getShopId());            Optional.ofNullable(mapShop.get(sku.getShopId())).ifPresent(shop -> vo.setShopName(shop.getShopName()));            vo.setSpuId(sku.getSpuId());            Optional.ofNullable(mapSpu.get(sku.getSpuId())).ifPresent(spu -> {                vo.setSpuName(spu.getName());                vo.setSpuMainImage(spu.getMainImage());            });            vo.setSkuId(sku.getId());            vo.setSkuName(sku.getName());            vo.setPrice(sku.getPrice());            vo.setQuantity(mapSkuQuantity.get(sku.getId()));            // specs            List<ProductSkuSpecEntity> skuSpecs =                    mapSkuSpecs.getOrDefault(sku.getId(), Collections.emptyList());            List<ProductSpecOptVo> listSpecOptVo = skuSpecs.stream().map(skuSpec -> {                ProductSpecOptVo optVo = new ProductSpecOptVo();                // set spec                Optional.ofNullable(mapSpecDef.get(skuSpec.getSpecId())).ifPresent(specDef -> {                    optVo.setSpecId(specDef.getId());                    optVo.setSpecName(specDef.getSpecName());                });                // set opt                Optional.ofNullable(mapOptDef.get(skuSpec.getOptId())).ifPresent(optDef -> {                    optVo.setOptId(optDef.getId());                    optVo.setOptName(optDef.getOptName());                });                // set sort                optVo.setSort(skuSpec.getSort());                return optVo;            }).collect(Collectors.toList());            vo.setSpecs(listSpecOptVo);            return vo;        }).collect(Collectors.toList());        // group by shop        Map<Long, List<OrderShopProductVo>> groupOrderShopProductVo = listOrderShopProductVo.stream().collect(Collectors.groupingBy(OrderShopProductVo::getShopId));        List<OrderShopVo> listOrderShopVo = new ArrayList<>();        for (Map.Entry<Long, List<OrderShopProductVo>> entry : groupOrderShopProductVo.entrySet()) {            Long shopId = entry.getKey();            List<OrderShopProductVo> items = entry.getValue();            OrderShopVo vo = new OrderShopVo();            vo.setShopId(shopId);            vo.setShopName(entry.getValue().get(0).getShopName());            vo.setItems(items);            listOrderShopVo.add(vo);        }        return listOrderShopVo;    }    /**     * 模拟订单支付成功回调     */    @Transactional(rollbackFor = Exception.class)    public void paySuccess(OrderPaySuccessMockDto dto) {        OrderEntity order = orderRepo.findOneByOrderNo(dto.getOrderNo());        if (order == null) {            throw new BaseException("订单未找到");        }        // 检查：仅当订单状态为待付款时才能支付        if (!Objects.equals(order.getStatus(), OrderStatusEnum.WAIT_PAY.getValue())) {            throw new BaseException("订单状态异常，仅当待付款时才能支付");        }        order.setStatus(OrderStatusEnum.PAID.getValue());        order.updateById();    }}