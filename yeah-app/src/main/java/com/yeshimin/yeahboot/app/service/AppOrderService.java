package com.yeshimin.yeahboot.app.service;import com.yeshimin.yeahboot.app.common.enums.OrderStatusEnum;import com.yeshimin.yeahboot.app.domain.dto.OrderItemDto;import com.yeshimin.yeahboot.app.domain.dto.OrderSubmitDto;import com.yeshimin.yeahboot.common.common.exception.BaseException;import com.yeshimin.yeahboot.common.service.IdService;import com.yeshimin.yeahboot.data.domain.entity.OrderEntity;import com.yeshimin.yeahboot.data.domain.entity.OrderItemEntity;import com.yeshimin.yeahboot.data.domain.entity.ProductSkuEntity;import com.yeshimin.yeahboot.data.domain.entity.ProductSpuEntity;import com.yeshimin.yeahboot.data.repository.OrderItemRepo;import com.yeshimin.yeahboot.data.repository.ProductSkuRepo;import com.yeshimin.yeahboot.data.repository.ProductSpuRepo;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;@Slf4j@Service@RequiredArgsConstructorpublic class AppOrderService {    private final ProductSkuRepo productSkuRepo;    private final ProductSpuRepo productSpuRepo;    private final OrderItemRepo orderItemRepo;    private final IdService idService;    /**     * 提交订单     */    @Transactional(rollbackFor = Exception.class)    public void submit(Long userId, OrderSubmitDto dto) {        // 查询sku        Set<Long> skuIds = dto.getItems().stream().map(OrderItemDto::getSkuId).collect(Collectors.toSet());        if (skuIds.size() != dto.getItems().size()) {            throw new BaseException("订单项中存在重复的SKU ID");        }        List<ProductSkuEntity> listSku = productSkuRepo.findListByIds(skuIds);        if (listSku.size() != skuIds.size()) {            throw new BaseException("订单项中存在无效的SKU ID");        }        // 检查：是否属于多家店铺        Set<Long> shopIds = listSku.stream().map(ProductSkuEntity::getShopId).collect(Collectors.toSet());        if (shopIds.size() > 1) {            throw new BaseException("订单项中存在多家店铺的SKU");        }        // 检查库存        for (OrderItemDto item : dto.getItems()) {            ProductSkuEntity sku = listSku.stream()                    .filter(s -> s.getId().equals(item.getSkuId()))                    .findFirst()                    .orElseThrow(() -> new BaseException("SKU ID " + item.getSkuId() + " 不存在"));            if (sku.getStock() < item.getQuantity()) {                throw new BaseException("SKU " + sku.getName() + " 库存不足");            }            // 扣减库存            boolean r = productSkuRepo.occurStock(item.getSkuId(), item.getQuantity());            log.info("sku[{},{}] 扣减库存结果：{}", sku.getId(), sku.getName(), r);            if (!r) {                throw new BaseException("SKU " + sku.getName() + " 库存不足");            }        }        // 创建订单        OrderEntity order = new OrderEntity();        List<OrderItemEntity> orderItems = new ArrayList<>(dto.getItems().size());        // 生成订单编号        final String orderNo = idService.nextEncodedId();        // 查询spu        Set<Long> spuIds = listSku.stream().map(ProductSkuEntity::getSpuId).collect(Collectors.toSet());        Map<Long, ProductSpuEntity> mapSpu = productSpuRepo.findListByIds(spuIds)                .stream().collect(Collectors.toMap(ProductSpuEntity::getId, spu -> spu));        // 总金额        BigDecimal totalAmount = BigDecimal.ZERO;        // 生成订单明细        for (OrderItemDto item : dto.getItems()) {            ProductSkuEntity sku = listSku.stream()                    .filter(s -> s.getId().equals(item.getSkuId()))                    .findFirst()                    .orElseThrow(() -> new BaseException("SKU ID " + item.getSkuId() + " 不存在"));            ProductSpuEntity spu = mapSpu.get(sku.getSpuId());            if (spu == null) {                throw new BaseException("SPU ID " + sku.getSpuId() + " 不存在");            }            OrderItemEntity orderItem = new OrderItemEntity();            orderItem.setMchId(sku.getMchId());            orderItem.setShopId(sku.getShopId());            orderItem.setMemberId(userId);            orderItem.setOrderNo(orderNo);            orderItem.setSkuId(sku.getId());            orderItem.setSkuName(sku.getName());            orderItem.setSpuId(sku.getSpuId());            orderItem.setSpuName(spu.getName());            orderItem.setUnitPrice(sku.getPrice());            orderItem.setQuantity(item.getQuantity());            orderItem.setTotalPrice(sku.getPrice().multiply(new BigDecimal(item.getQuantity())));            orderItems.add(orderItem);            // 累加总金额            totalAmount = totalAmount.add(orderItem.getTotalPrice());        }        // 保存订单        Optional.ofNullable(listSku.get(0)).ifPresent(sku -> {            order.setMchId(sku.getMchId());            order.setShopId(sku.getShopId());        });        order.setMemberId(userId);        order.setOrderNo(orderNo);        order.setTotalAmount(totalAmount);        order.setStatus(OrderStatusEnum.WAIT_PAY.getValue()); // 设置订单状态为待付款        order.insert();        // 保存订单明细        orderItems.forEach(orderItem -> orderItem.setOrderId(order.getId()));        orderItemRepo.saveBatch(orderItems);    }}